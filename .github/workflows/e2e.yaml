name: E2E CI

on:
  # push:
  #   branches: [ main, test ]
  pull_request:
    branches: [ main, test ]
    types:
      - '*'

jobs:
  istio-e2e:
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    if: ${{ contains(github.event.pull_request.labels.*.name, 'needs-e2e-test') }}
    env: 
      ISTIO_VERSION: '1.12.2'
      KIND_VERSION: v0.11.1
      KERNEL_VERSION: v5.4
    steps:
    - uses: actions/checkout@v3
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
    - name: install bpftool
      run: |
        sudo bash ./scripts/build-bpftool.sh
    - name: setup kind cluster
      run: |
        ./scripts/setup-kind.sh
    - name: try load and unload
      run: |
        uname -a
        make load
        make clean
    - name: install istio
      run: |
        bash ./scripts/install-istio.sh
    - name: deploy test apps
      run: |
        kubectl label ns default istio-injection=enabled
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/sleep/sleep.yaml
        kubectl apply -f https://raw.githubusercontent.com/istio/istio/master/samples/helloworld/helloworld.yaml
        while true; do [ "$(kubectl get po -l app=sleep | grep '2/2')" = "" ] || break && (echo waiting for sleep app ready; sleep 3); done
        while true; do [ "$(kubectl get po -l app=helloworld | grep '2/2')" = "" ] || break && (echo waiting for helloworld app ready; sleep 3); done
    - name: test connect without Merbridge
      run: |
        kubectl exec $(kubectl get po -l app=sleep -o=jsonpath='{..metadata.name}') -c sleep -- curl -s -v helloworld:5000/hello
    - name: install merbridge
      run: |
        nohup go run -exec sudo ./app/main.go -k -m istio -d > mbctl.log &
        while true; do [ "$(cat mbctl.log | grep 'Pod Watcher Ready')" = "" ] || break && (echo waiting for mbctl watcher ready; sleep 3); done
    - name: test connect with Merbridge
      run: |
        kubectl exec $(kubectl get po -l app=sleep -o=jsonpath='{..metadata.name}') -c sleep -- curl -s -v helloworld:5000/hello
        # check if eBPF works
        [ "$(sudo cat /sys/kernel/debug/tracing/trace | grep 'from user container')" = "" ] && (echo eBPF progs not work; sudo cat /sys/kernel/debug/tracing/trace; sudo bpftool prog; sudo bpftool map; cat mbctl.log; sudo ps -ef; exit 10) || exit 0
